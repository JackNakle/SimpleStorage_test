//http://127.0.0.1:7545

const ethers = require("ethers")
const fs = require("fs-extra")
require("dotenv").config()

async function main() {
  //console.log(process.env.PRIVATE_KEY);
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider)
  //const encryptedJson = fs.readFileSync("./encryptedKey.json", "utf8")
  //let wallet = new ethers.Wallet.fromEncryptedJsonSync(
  //   encryptedJson,
  //   process.env.PRIVATE_KEY_PASSWORD
  // )
  // wallet = await wallet.connect(provider)

  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  )
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
  console.log("Deploying, please wait ...")
  const contract = await contractFactory.deploy()
  await contract.deployTransaction.wait(1)
  console.log(`Contract Address: ${contract.address}`)

  //console.log("Here is the deployment transaction:");
  //console.log(contract.deployTransaction);
  //console.log("Here is the transaction receipt:");
  //console.log(transactionReceipt);

  // console.log("Let's deploy with only transaction data");
  // const nonce = await wallet.getTransactionCount();
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: 20000000000,
  //   gasLimit: 1000000,
  //   to: null,
  //   value: 0,
  //   data: "0x608060405234801561001057600080fd5b5061094a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a5780636f760f41146100965780638bab8dd5146100b25780639e7a13ad146100e2575b600080fd5b610064610113565b60405161007191906102b8565b60405180910390f35b610094600480360381019061008f9190610313565b61011c565b005b6100b060048036038101906100ab9190610486565b610126565b005b6100cc60048036038101906100c791906104e2565b6101b5565b6040516100d991906102b8565b60405180910390f35b6100fc60048036038101906100f79190610313565b6101e3565b60405161010a9291906105b3565b60405180910390f35b60008054905090565b8060008190555050565b60006040518060400160405280838152602001848152509050600281908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908161018a91906107ef565b5050508160018460405161019e91906108fd565b908152602001604051809103902081905550505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600281815481106101f357600080fd5b906000526020600020906002020160009150905080600001549080600101805461021c90610612565b80601f016020809104026020016040519081016040528092919081815260200182805461024890610612565b80156102955780601f1061026a57610100808354040283529160200191610295565b820191906000526020600020905b81548152906001019060200180831161027857829003601f168201915b5050505050905082565b6000819050919050565b6102b28161029f565b82525050565b60006020820190506102cd60008301846102a9565b92915050565b6000604051905090565b600080fd5b600080fd5b6102f08161029f565b81146102fb57600080fd5b50565b60008135905061030d816102e7565b92915050565b600060208284031215610329576103286102dd565b5b6000610337848285016102fe565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103938261034a565b810181811067ffffffffffffffff821117156103b2576103b161035b565b5b80604052505050565b60006103c56102d3565b90506103d1828261038a565b919050565b600067ffffffffffffffff8211156103f1576103f061035b565b5b6103fa8261034a565b9050602081019050919050565b82818337600083830152505050565b6000610429610424846103d6565b6103bb565b90508281526020810184848401111561044557610444610345565b5b610450848285610407565b509392505050565b600082601f83011261046d5761046c610340565b5b813561047d848260208601610416565b91505092915050565b6000806040838503121561049d5761049c6102dd565b5b600083013567ffffffffffffffff8111156104bb576104ba6102e2565b5b6104c785828601610458565b92505060206104d8858286016102fe565b9150509250929050565b6000602082840312156104f8576104f76102dd565b5b600082013567ffffffffffffffff811115610516576105156102e2565b5b61052284828501610458565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561056557808201518184015260208101905061054a565b83811115610574576000848401525b50505050565b60006105858261052b565b61058f8185610536565b935061059f818560208601610547565b6105a88161034a565b840191505092915050565b60006040820190506105c860008301856102a9565b81810360208301526105da818461057a565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061062a57607f821691505b60208210810361063d5761063c6105e3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106a57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610668565b6106af8683610668565b95508019841693508086168417925050509392505050565b6000819050919050565b60006106ec6106e76106e28461029f565b6106c7565b61029f565b9050919050565b6000819050919050565b610706836106d1565b61071a610712826106f3565b848454610675565b825550505050565b600090565b61072f610722565b61073a8184846106fd565b505050565b5b8181101561075e57610753600082610727565b600181019050610740565b5050565b601f8211156107a35761077481610643565b61077d84610658565b8101602085101561078c578190505b6107a061079885610658565b83018261073f565b50505b505050565b600082821c905092915050565b60006107c6600019846008026107a8565b1980831691505092915050565b60006107df83836107b5565b9150826002028217905092915050565b6107f88261052b565b67ffffffffffffffff8111156108115761081061035b565b5b61081b8254610612565b610826828285610762565b600060209050601f8311600181146108595760008415610847578287015190505b61085185826107d3565b8655506108b9565b601f19841661086786610643565b60005b8281101561088f5784890151825560018201915060208501945060208101905061086a565b868310156108ac57848901516108a8601f8916826107b5565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60006108d78261052b565b6108e181856108c1565b93506108f1818560208601610547565b80840191505092915050565b600061090982846108cc565b91508190509291505056fea26469706673582212201fbc5d53cbc15bab46d181b39e9a091cf33ac35833824e1a354481a8494ed1a164736f6c634300080f0033",
  //   chainId: 1337,
  // };
  // const sentTxResponse = await wallet.sendTransaction(tx);
  // await sentTxResponse.wait(1);
  // console.log(sentTxResponse);

  const currentFavoriteNumber = await contract.retrieve()
  console.log(`Current Favorite Number:${currentFavoriteNumber.toString()}`)
  const transactionResponse = await contract.store("7")
  const transactionReceipt = await transactionResponse.wait(1)
  const updatedFavoriteNumber = await contract.retrieve()
  console.log(`Updated favorite number is ${updatedFavoriteNumber}`)
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })
